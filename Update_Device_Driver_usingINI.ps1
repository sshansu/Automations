<#
This sample script is not supported under any Microsoft standard support program or service.
The sample script is provided AS IS without warranty of any kind.
Microsoft further disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a particular purpose.
The entire risk arising out of the use or performance of the sample scripts and documentation remains with you.
In no event shall Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever (including, #without limitation, damages for 
loss of business profits, business interruption, loss of business information, or other pecuniary loss) arising out of the use of or inability to use the sample scripts or documentation, even if 
Microsoft has been advised of the possibility of such damages

With help of PowerShell script, we allow the devices to look through driver repository files on a server share and remotely install driver INFs using the native PNPUtil tool for driver management. 

•	We place the PowerShell script and Config.xml file to NETLOGON share. 
•	Using legacy software distribution method, we execute the PowerShell script from Netlogon share. This package will be configured to rerun on a schedule, 
    for ex. Every Friday on a bi-weekly basis. 
•	The Config.xml mentioned in line 39, we define <ServerShare> containing the path of HP drivers. The <DriverOption> contains an integer from 1 to 6, each integer representing a driver as mapped in the PowerShell 
    script above. For example, 1 is for Network, 2 represents Audio, 3 for Chipset, 4 for Graphics, 5 for Other and 6 denotes Storage. And lastly, the <DriverOutputPath> carries the path of the log that shows results 
    generated by PNPUtil.exe.

    <?xml version="1.0"?>
    <CentralSettings>
        <ServerShare>\\ServerShare\HP-Drivers-POC</ServerShare>
        <DriverOption>1</DriverOption>
        <DriverOutputPath>C:\Windows\Temp\DriverOutput.log</DriverOutputPath>
    </CentralSettings>
#>

#LogWrite function
Function Write-Log
{

    PARAM(
         [String]$Message,
         [String]$Path = "C:\windows\Temp\$($env:computername)-DriverUpdate.Log",
         [int]$severity,
         [string]$component
         )
         
         $TimeZoneBias = Get-CimInstance -Query "Select Bias from Win32_TimeZone"
         $Date = Get-Date -Format "HH:mm:ss.fff"
         $Date2 = Get-Date -Format "MM-dd-yyyy"
         $type =1
         
         "<![LOG[$Message]LOG]!><time=$([char]34)$date$($TimeZoneBias.bias)$([char]34) date=$([char]34)$date2$([char]34) component=$([char]34)$component$([char]34) context=$([char]34)$([char]34) type=$([char]34)$severity$([char]34) thread=$([char]34)$([char]34) file=$([char]34)$([char]34)>"| Out-File -FilePath $Path -Append -NoClobber -Encoding default
}

# Read XML File
$XMLFilePath = "C:\Temp\Drivers-Update\Config.xml"
[xml]$xml = get-content $XMLFilePath

function Get-ServerShare {
    $obj = $xml.CentralSettings.ServerShare
    Write-Output $obj
}

function Get-DriverOption {
    $obj = $xml.CentralSettings.DriverOption
    Write-Output $obj
}

function Get-DriverOutputPath {
    $obj = $xml.CentralSettings.DriverOutputPath
    Write-Output $obj
}

# Define Variables
$serverpath = Get-ServerShare
$option = Get-DriverOption
$DriverOutputPath = Get-DriverOutputPath
$DeviceModel = Get-DeviceModel

# Define driver based on driver option from above variable
$DrivertoUpdate = Switch ($option)
      {
       1 { "Network" }
       2 { "Audio" }
       3 { "Chipset" }
       4 { "Graphics" }
       5 { "Other" }
       6 { "Storage" }
      }

Write-Log -Message " " -severity 1 -component "Initialize Script"
Write-Log -Message "Driver location: $serverpath"  -severity 1 -component "GetParams"
Write-Log -Message "Driver to update: $DrivertoUpdate"  -severity 1 -component "GetParams"
Write-Log -Message "Driver output path: $DriverOutputPath"  -severity 1 -component "GetParams"
Write-Log -Message "Device model: $DeviceModel"  -severity 1 -component "GetParams"

# Get device model 
Function Get-DeviceModel{
        $obj = Get-CimInstance -ClassName Win32_ComputerSystem | select -ExpandProperty Model
        Write-Output $obj
    }

# Invoke pnputil 
Function Update_Driver{
    PARAM(
            [String]$sharepath,
            [String]$Driver
         ) 
    
    Write-Log -Message "Sleeping for 10 seconds."  -severity 1 -component "SearchDriver"
    sleep 10
    Write-Log -Message "Searching for driver repository for current model on server share."  -severity 1 -component "SearchDriver"
    $subfolder = get-childitem -Path $sharepath -Recurse -Filter $DeviceModel -Directory -ErrorAction SilentlyContinue
    if($subfolder)
        {
            Write-Log -Message "Found driver folder for this specific model. Will continue..."  -severity 1 -component "SearchDriver"
        }
    else
        {
            Write-Log -Message "Did not find any driver repository for this model. Exiting"  -severity 2 -component "SearchDriver"
            Exit
        }

    $Path = Join-path $sharepath -ChildPath $subfolder
    $1stLevelSF = (Get-ChildItem -path $Path -Directory).FullName
    $2ndLevelSF = (Get-ChildItem -path $1stLevelSF -Directory).FullName
    $driverpath = Join-path $2ndLevelSF -ChildPath $Driver
    $InfWCPath = Join-Path $driverpath -ChildPath "\*.inf"
    Write-Log -Message "Driver path: $InfWCPath"  -severity 1 -component "SearchDriver"

    $argument = "/c C:\windows\system32\pnputil /add-driver `"$InfWCPath`" /subdirs /install /reboot >> $($DriverOutputPath)"
    
    #Test connectivity to network share
    try
        {
            Resolve-Path $Path -ErrorAction Stop | out-Null
            Write-Log -Message "Successfully resolved server share."  -severity 1 -component "UpdateDriver"
        }
    catch 
        {
            Write-Log -Message "Error! $($_.exception.message)"  -severity 3 -component "UpdateDriver"
            Write-Log -Message "Exit" -severity 1 -component "UpdateDriver"
            Exit
        }
    
    # driver update
    try
        {
            Write-Log -Message "Sleeping for 10 seconds."  -severity 1 -component "UpdateDriver"
            sleep 10
            Write-Log -Message "Attempting to update driver..."  -severity 1 -component "UpdateDriver"
            Write-Log -Message "Executing command: $argument"  -severity 1 -component "UpdateDriver"
            Start-Process "cmd.exe" -ArgumentList $argument -WindowStyle Hidden -ErrorAction Stop
            Write-Log -Message "Driver install invoked!" -severity 1 -component "UpdateDriver"
        }
    catch [system.exception]
        {
            Write-Log -Message "ERROR: Could not invoke driver install due to: $($_.exception.message). Exiting" -severity 3 -component "UpdateDriver"
            Exit
        }  

} 

#invoke driver update
Update_Driver -sharepath $serverpath -Driver $DrivertoUpdate
Write-Log -Message "End" -severity 1 -component "End"
